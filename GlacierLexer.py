# Generated from Glacier.g4 by ANTLR 4.8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\65")
        buf.write("\u0101\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5")
        buf.write("\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\17")
        buf.write("\3\17\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30")
        buf.write("\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35")
        buf.write("\3\36\3\36\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3#\3#\3")
        buf.write("$\3$\3%\3%\3&\3&\3\'\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3")
        buf.write(",\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\6\61\u00f6\n\61")
        buf.write("\r\61\16\61\u00f7\3\61\3\61\3\62\3\62\3\63\3\63\3\64\3")
        buf.write("\64\2\2\65\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E")
        buf.write("$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65\3\2\6")
        buf.write("\5\2\13\f\17\17\"\"\3\2c|\3\2\62;\3\2C\\\2\u0101\2\3\3")
        buf.write("\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2")
        buf.write("\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2")
        buf.write("\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2")
        buf.write("\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2")
        buf.write("\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3")
        buf.write("\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2")
        buf.write("\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3")
        buf.write("\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K")
        buf.write("\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2")
        buf.write("U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2")
        buf.write("\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2")
        buf.write("\2\3i\3\2\2\2\5k\3\2\2\2\7q\3\2\2\2\ts\3\2\2\2\13w\3\2")
        buf.write("\2\2\r~\3\2\2\2\17\u0085\3\2\2\2\21\u0087\3\2\2\2\23\u0095")
        buf.write("\3\2\2\2\25\u009b\3\2\2\2\27\u009d\3\2\2\2\31\u00a4\3")
        buf.write("\2\2\2\33\u00a7\3\2\2\2\35\u00a9\3\2\2\2\37\u00ad\3\2")
        buf.write("\2\2!\u00af\3\2\2\2#\u00b1\3\2\2\2%\u00b3\3\2\2\2\'\u00b7")
        buf.write("\3\2\2\2)\u00b9\3\2\2\2+\u00bb\3\2\2\2-\u00bd\3\2\2\2")
        buf.write("/\u00bf\3\2\2\2\61\u00c1\3\2\2\2\63\u00c3\3\2\2\2\65\u00c5")
        buf.write("\3\2\2\2\67\u00c7\3\2\2\29\u00c9\3\2\2\2;\u00cb\3\2\2")
        buf.write("\2=\u00cd\3\2\2\2?\u00cf\3\2\2\2A\u00d2\3\2\2\2C\u00d5")
        buf.write("\3\2\2\2E\u00d7\3\2\2\2G\u00d9\3\2\2\2I\u00db\3\2\2\2")
        buf.write("K\u00dd\3\2\2\2M\u00df\3\2\2\2O\u00e2\3\2\2\2Q\u00e4\3")
        buf.write("\2\2\2S\u00e6\3\2\2\2U\u00e8\3\2\2\2W\u00ea\3\2\2\2Y\u00ec")
        buf.write("\3\2\2\2[\u00ee\3\2\2\2]\u00f0\3\2\2\2_\u00f2\3\2\2\2")
        buf.write("a\u00f5\3\2\2\2c\u00fb\3\2\2\2e\u00fd\3\2\2\2g\u00ff\3")
        buf.write("\2\2\2ij\7*\2\2j\4\3\2\2\2kl\7d\2\2lm\7g\2\2mn\7i\2\2")
        buf.write("no\7k\2\2op\7p\2\2p\6\3\2\2\2qr\7+\2\2r\b\3\2\2\2st\7")
        buf.write("n\2\2tu\7g\2\2uv\7v\2\2v\n\3\2\2\2wx\7n\2\2xy\7g\2\2y")
        buf.write("z\7v\2\2z{\7t\2\2{|\7g\2\2|}\7e\2\2}\f\3\2\2\2~\177\7")
        buf.write("f\2\2\177\u0080\7g\2\2\u0080\u0081\7h\2\2\u0081\u0082")
        buf.write("\7k\2\2\u0082\u0083\7p\2\2\u0083\u0084\7g\2\2\u0084\16")
        buf.write("\3\2\2\2\u0085\u0086\7\60\2\2\u0086\20\3\2\2\2\u0087\u0088")
        buf.write("\7f\2\2\u0088\u0089\7g\2\2\u0089\u008a\7h\2\2\u008a\u008b")
        buf.write("\7k\2\2\u008b\u008c\7p\2\2\u008c\u008d\7g\2\2\u008d\u008e")
        buf.write("\7/\2\2\u008e\u008f\7u\2\2\u008f\u0090\7{\2\2\u0090\u0091")
        buf.write("\7p\2\2\u0091\u0092\7v\2\2\u0092\u0093\7c\2\2\u0093\u0094")
        buf.write("\7z\2\2\u0094\22\3\2\2\2\u0095\u0096\7s\2\2\u0096\u0097")
        buf.write("\7w\2\2\u0097\u0098\7q\2\2\u0098\u0099\7v\2\2\u0099\u009a")
        buf.write("\7g\2\2\u009a\24\3\2\2\2\u009b\u009c\7)\2\2\u009c\26\3")
        buf.write("\2\2\2\u009d\u009e\7n\2\2\u009e\u009f\7c\2\2\u009f\u00a0")
        buf.write("\7o\2\2\u00a0\u00a1\7d\2\2\u00a1\u00a2\7f\2\2\u00a2\u00a3")
        buf.write("\7c\2\2\u00a3\30\3\2\2\2\u00a4\u00a5\7k\2\2\u00a5\u00a6")
        buf.write("\7h\2\2\u00a6\32\3\2\2\2\u00a7\u00a8\7\"\2\2\u00a8\34")
        buf.write("\3\2\2\2\u00a9\u00aa\7u\2\2\u00aa\u00ab\7g\2\2\u00ab\u00ac")
        buf.write("\7v\2\2\u00ac\36\3\2\2\2\u00ad\u00ae\7#\2\2\u00ae \3\2")
        buf.write("\2\2\u00af\u00b0\7-\2\2\u00b0\"\3\2\2\2\u00b1\u00b2\7")
        buf.write("/\2\2\u00b2$\3\2\2\2\u00b3\u00b4\7\60\2\2\u00b4\u00b5")
        buf.write("\7\60\2\2\u00b5\u00b6\7\60\2\2\u00b6&\3\2\2\2\u00b7\u00b8")
        buf.write("\7&\2\2\u00b8(\3\2\2\2\u00b9\u00ba\7(\2\2\u00ba*\3\2\2")
        buf.write("\2\u00bb\u00bc\7,\2\2\u00bc,\3\2\2\2\u00bd\u00be\7\61")
        buf.write("\2\2\u00be.\3\2\2\2\u00bf\u00c0\7<\2\2\u00c0\60\3\2\2")
        buf.write("\2\u00c1\u00c2\7>\2\2\u00c2\62\3\2\2\2\u00c3\u00c4\7?")
        buf.write("\2\2\u00c4\64\3\2\2\2\u00c5\u00c6\7@\2\2\u00c6\66\3\2")
        buf.write("\2\2\u00c7\u00c8\7A\2\2\u00c88\3\2\2\2\u00c9\u00ca\7\u0080")
        buf.write("\2\2\u00ca:\3\2\2\2\u00cb\u00cc\7a\2\2\u00cc<\3\2\2\2")
        buf.write("\u00cd\u00ce\7`\2\2\u00ce>\3\2\2\2\u00cf\u00d0\7%\2\2")
        buf.write("\u00d0\u00d1\7v\2\2\u00d1@\3\2\2\2\u00d2\u00d3\7%\2\2")
        buf.write("\u00d3\u00d4\7h\2\2\u00d4B\3\2\2\2\u00d5\u00d6\7B\2\2")
        buf.write("\u00d6D\3\2\2\2\u00d7\u00d8\7%\2\2\u00d8F\3\2\2\2\u00d9")
        buf.write("\u00da\7$\2\2\u00daH\3\2\2\2\u00db\u00dc\7b\2\2\u00dc")
        buf.write("J\3\2\2\2\u00dd\u00de\7.\2\2\u00deL\3\2\2\2\u00df\u00e0")
        buf.write("\7.\2\2\u00e0\u00e1\7B\2\2\u00e1N\3\2\2\2\u00e2\u00e3")
        buf.write("\7k\2\2\u00e3P\3\2\2\2\u00e4\u00e5\7g\2\2\u00e5R\3\2\2")
        buf.write("\2\u00e6\u00e7\7u\2\2\u00e7T\3\2\2\2\u00e8\u00e9\7h\2")
        buf.write("\2\u00e9V\3\2\2\2\u00ea\u00eb\7f\2\2\u00ebX\3\2\2\2\u00ec")
        buf.write("\u00ed\7n\2\2\u00edZ\3\2\2\2\u00ee\u00ef\7=\2\2\u00ef")
        buf.write("\\\3\2\2\2\u00f0\u00f1\7]\2\2\u00f1^\3\2\2\2\u00f2\u00f3")
        buf.write("\7_\2\2\u00f3`\3\2\2\2\u00f4\u00f6\t\2\2\2\u00f5\u00f4")
        buf.write("\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7")
        buf.write("\u00f8\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fa\b\61\2")
        buf.write("\2\u00fab\3\2\2\2\u00fb\u00fc\t\3\2\2\u00fcd\3\2\2\2\u00fd")
        buf.write("\u00fe\t\4\2\2\u00fef\3\2\2\2\u00ff\u0100\t\5\2\2\u0100")
        buf.write("h\3\2\2\2\4\2\u00f7\3\b\2\2")
        return buf.getvalue()


class GlacierLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    WS = 48
    LETTER = 49
    DIGIT = 50
    LARGE = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "'begin'", "')'", "'let'", "'letrec'", "'define'", "'.'", 
            "'define-syntax'", "'quote'", "'''", "'lambda'", "'if'", "' '", 
            "'set'", "'!'", "'+'", "'-'", "'...'", "'$'", "'&'", "'*'", 
            "'/'", "':'", "'<'", "'='", "'>'", "'?'", "'~'", "'_'", "'^'", 
            "'#t'", "'#f'", "'@'", "'#'", "'\"'", "'`'", "','", "',@'", 
            "'i'", "'e'", "'s'", "'f'", "'d'", "'l'", "';'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "LETTER", "DIGIT", "LARGE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "WS", "LETTER", "DIGIT", "LARGE" ]

    grammarFileName = "Glacier.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


