// An example of Glacier including feature of functional Programming
// 2. High-ordersim in order

// FeedForward Net in Transformer

def FFN :: Weight: Tensor(Float, (2,2))  -> Input: Tensor(Float, (2,2)) -> Output: Tensor(Float, (2,2))
{
    Output := Weight * Input + Bias
}


def FFNBox :: a: Tensor(Float, (2,2)) -> b: Tensor(Float, (2,2)) -> c: Tensor(Float, (2,2)) -> d: Tensor(Float, (2,2)) -> Output: Tensor(Float, (2,2))
{}

FFNBox := FFN(FFN, x)

// FFNBox(weight, x) == FFN(FFN(weight, x))