def Linear :: Weight: Tensor(Float, (2, 2)) -> Bias: Tensor(Float,(2,2))  -> Input: Tensor(Float, (2, 2)) -> Output: Tensor(Float, (2, 2))
{
    Output := Weight @ Input + Bias
}

def Linear2 :: Weight: Tensor(Float, (2, 2)) -> Bias: Tensor(Float,(2,2)) -> Input: Tensor(Float) -> Output: Tensor(Float, (2, 2))
{
    Output := Weight @ Input + Bias
}

def Relu ::  Weight: [Tensor(Float, (2, 2)), Tensor(Float, (2, 2))] -> Bias: [Tensor(Float, (2, 2)), Tensor(Float, (2, 2))] -> State: Tensor(Float, (2, 2)) -> Input: Tensor(Float) -> Output: Tensor(Float, (2, 2))
{
    let x = Linear(Input, Weight[0], Bias[0])
    let s = Linear(State, Weight[1], Bias[1])
    Output := (s, @relu(x + s))
}


def trained_cell :: Weight:[Tensor(Float, (2, 2)), Tensor(Float, (2, 2))] -> Bias: [Tensor(Float, (2, 2)), Tensor(Float, (2, 2))] -> Output: Func{
    def fn:: State: Tensor(Float, (2, 2)) -> Input: Tensor(Float) -> Output:None{
        Relu(Weight, Bias, State, Input)
    }
}

def Encode:: (input_type, state_type) => Cell : Func -> Input : List[input_type] -> Initial : state_type -> FinalState : state_type -> Output:None{
    foldl(\(State, In)-> Cell(State, In)[0] , Initial, Input)
}

let state: Shape(3,3) = [
    [1,2,3],
    [4,5,6],
    [7,8,9]
]

let x: Shape(3,1) = [
    [1,2,3]
]